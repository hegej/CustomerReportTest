@page "/generate-report/{OrganizationName}"
@inject OrganizationService OrganizationService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Report for @OrganizationName</h3>

<button class="btn btn-primary" @onclick="GenerateReportAsync">Generate Report</button>

@if (reportGenerated)
{
    if (organizationData != null)
    {
        <div class="report-container">
            <div class="organization">
                <h3>Customer Name: @organizationData.customerName</h3>
                <p>Organization ID: @organizationData.organizationId</p>

                @foreach (var farm in organizationData.farms)
                {
                    <div class="farm">
                        <h4>Farm: @farm.Value.name</h4>
                        <p>Location: @farm.Value.location</p>
                        <p>Average temperature: @farm.Value.average_temp °C</p>
                        <p>Average oxygen: @farm.Value.average_oxygen</p>
                        <p>Average depth: @farm.Value.average_depth</p>
                        <p>Average kjmhunn: @farm.Value.average_kjmhunn</p>
                        <p>Average bevegelig: @farm.Value.average_bevegelig</p>
                        <p>Average weight: @farm.Value.average_weight</p>
                        <p>High baseline: @farm.Value.high_baseline</p>
                        <p>Latitude: @farm.Value.latitude</p>
                        <p>Longitude: @farm.Value.longitude</p>

                        @foreach (var cage in farm.Value.cages)
                        {
                            <div class="cage">
                                <h5>Cage Name: @cage.Value.serial_number</h5>
                                <p>Cage ID: @cage.Value.id</p>

                                @if (cage.Value.DetailedData != null && cage.Value.DetailedData.Any())
                                {
                                    var detailedData = cage.Value.DetailedData.First();

                                    <div class="table-container">
                                        <table class="nested-table detailed-data-table">
                                            <tr><th colspan="2">Environment Data</th></tr>
                                            <tr>
                                                <th>Min Depth</th>
                                                <td>@detailedData.environment.min_depth</td>
                                            </tr>
                                            <tr>
                                                <th>Max Depth</th>
                                                <td>@detailedData.environment.max_depth</td>
                                            </tr>
                                            <tr>
                                                <th>Min Oxygen</th>
                                                <td>@detailedData.environment.min_oxygen</td>
                                            </tr>
                                            <tr>
                                                <th>Max Oxygen</th>
                                                <td>@detailedData.environment.max_depth</td>
                                            </tr>
                                            <tr>
                                                <th>Min Temp</th>
                                                <td>@detailedData.environment.min_temp</td>
                                            </tr>
                                            <tr>
                                                <th>Max Temp</th>
                                                <td>@detailedData.environment.max_temp</td>
                                            </tr>
                                        </table>
                                        <table class="nested-table detailed-data-table">
                                            <tr><th colspan="2">Lice Details</th></tr>
                                            <tr>
                                                <th>Fish yesterday</th>
                                                <td>@detailedData.lice.fishs_yesterday</td>
                                            </tr>
                                            <tr>
                                                <th>Fish today</th>
                                                <td>@detailedData.lice.fishs_today</td>
                                            </tr>
                                            <tr>
                                                <th>Mature female lice</th>
                                                <td>@detailedData.lice.kjmhunn</td>
                                            </tr>
                                            <tr>
                                                <th>Moving lice</th>
                                                <td>@detailedData.lice.bevegelig</td>
                                            </tr>
                                            <tr>
                                                <th>Last Sample Date</th>
                                                <td>@detailedData.lice.last_sample_date</td>
                                            </tr>
                                        </table>
                                    </div>
                                }

                                <table>
                                    <tr><th>Fish Group Name</th><th>ID</th></tr>
                                    @foreach (var fishGroup in cage.Value.fishGroups)
                                    {
                                        <tr>
                                            <td>@fishGroup.name</td>
                                            <td>@fishGroup.id</td>
                                            <td>
                                                <LineChart @ref="lineChart" Width="500" Class="mb-4" />
                                                
                                                @if (fishGroup.statistics != null)
                                                {
                                                    foreach (var statistic in fishGroup.statistics)
                                                    {
                                                        <table class="nested-table">
                                                            <tr><th>Date</th><th>Oxygen</th><th>Temperature</th><th>Number of Fish</th><th>Lice Details</th></tr>
                                                            <tr>
                                                                <td>@statistic.date</td>
                                                                <td>@statistic.oxygen</td>
                                                                <td>@statistic.temprature</td>
                                                                <td>@statistic.numberOfFishs</td>
                                                                <td>
                                                                    @if (statistic.lices != null)
                                                                    {
                                                                        <table>
                                                                            <tr><th>Type</th><th>Min</th><th>Average</th><th>Max</th></tr>
                                                                            @foreach (var lice in statistic.lices)
                                                                            {
                                                                                <tr>
                                                                                    <td>@lice.name</td>
                                                                                    <td>@lice.min</td>
                                                                                    <td>@lice.average</td>
                                                                                    <td>@lice.max</td>
                                                                                </tr>
                                                                            }
                                                                        </table>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        </table>
                                                    }
                                                }
                                                @if (fishGroup.averageData != null)
                                                {
                                                    foreach (var averageData in fishGroup.averageData)
                                                    {
                                                        <table class="nested-table average-data-table">
                                                            <tr>
                                                                <th>Week number</th>
                                                                <th>Start date</th>
                                                                <th>End date</th>
                                                                <th>Average Weight</th>
                                                            </tr>
                                                            <tr>
                                                                <td>@averageData.average_weight.week_number</td>
                                                                <td>@averageData.average_weight.start_date</td>
                                                                <td>@averageData.average_weight.end_date</td>
                                                                <td>@averageData.average_weight.average</td>
                                                            </tr>
                                                            <tr>
                                                                <th colspan="4">Average Lice Details</th>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="4">
                                                                    <table class="nested-table lice-details-table">
                                                                        @foreach (var lice in averageData.average_lice.lices)
                                                                        {
                                                                            <tr>
                                                                                <td>@lice.name</td>
                                                                                <td>@lice.average</td>
                                                                            </tr>
                                                                        }
                                                                    </table>
                                                                </td>
                                                            </tr>
                                                        </table>
                                                    }
                                                }

                                            </td>
                                        </tr>
                                    }
                                </table>

                                @if (cage.Value.SensorsInfo != null)
                                {
                                    <h5> Sensor Data</h5>
                                    @foreach (var sensor in cage.Value.SensorsInfo)
                                    {
                                        <table class="nested-table">
                                            <tr>
                                                <th>Active</th>
                                                <th>Sensor name</th>
                                                <th>Last Schedule Status</th>
                                                <th>Winch ID</th>
                                                <th>Total fish today</th>
                                            </tr>
                                            <tr>
                                                <td class="@(sensor.active ? "active-status-yes" : "active-status-no")">@(sensor.active ? "Yes" : "No")</td>
                                                <td>@sensor.serial_number</td>
                                                <td>@sensor.last_schedule_status</td>
                                                <td>@sensor.winch</td>
                                                <td>@sensor.total_fishs_today</td>
                                            </tr>
                                        </table>

                                        @if (sensor.scheduleData != null)
                                        {
                                            <h6>Schedule for Sensor</h6>
                                            <table class="nested-table">
                                                <thead>
                                                    <tr>
                                                        <th>Active</th>
                                                        <th>Setting</th>
                                                        <th>Positions</th>
                                                        <th>Schedule Time</th>
                                                        <th>Period (hours)</th>
                                                        <th>Operation type</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var schedule in sensor.scheduleData)
                                                    {
                                                        <tr>
                                                            <td class="@(schedule.is_active ? "active-status-yes" : "active-status-no")">@(schedule.is_active ? "Yes" : "No")</td>
                                                            <td>@schedule.setting</td>
                                                            <td>@schedule.positions</td>
                                                            <td>@schedule.schedule_time</td>
                                                            <td>@schedule.period</td>
                                                            <td>@schedule.operation_type</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        }
                                    }
                                }
                            </div> <!-- cage -->
                        }
                    </div> <!-- farm -->
                }
            </div> <!-- organization -->
        </div> <!-- report-container -->
    }
    else if (attemptedToGenerateReport)
    {
        <p>Report failed to generate or no data available.</p>
    }
}


@if (isLoading)
{
    <p>Fetching organization data...</p>
}
else if (reportGenerated && organizationData != null)
{
    <!-- Display the report -->
}
else if (attemptedToGenerateReport && !string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (attemptedToGenerateReport)
{
    <p>Report failed to generate or no data available.</p>
}

@code {
    [Parameter]
    public string OrganizationName { get; set; }
    private Organization organizationData;
    private bool reportGenerated = false;
    private bool attemptedToGenerateReport = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadReportFromSessionAsync();
            StateHasChanged();
        }
    }

    private async Task GenerateReportAsync()
    {
        attemptedToGenerateReport = true;
        isLoading = true;
        errorMessage = "";

        try
        {
            organizationData = await OrganizationService.GetOrganizationDataAsync(OrganizationName);
            reportGenerated = organizationData != null;

            if (reportGenerated)
            {
                await SessionStorage.SetItemAsStringAsync($"report-{OrganizationName}", JsonSerializer.Serialize(organizationData));

                PrepareChartData();

                for (int i = 0; i < chartData.Length; i++)
                {
                    if (chartData[i] == null)
                    {
                        chartData[i] = 0;
                    }
                }

                await lineChart.InitializeAsync(chartData: chartData, chartOptions: lineChartOptions, plugins: new string[] { "ChartDataLabels" });
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to generate report: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadReportFromSessionAsync()
    {
        var reportJson = await SessionStorage.GetItemAsStringAsync($"report-{OrganizationName}");
        if (!string.IsNullOrEmpty(reportJson))
        {
            organizationData = JsonSerializer.Deserialize<Organization>(reportJson);
            reportGenerated = organizationData != null;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (reportGenerated && organizationData != null)
        {
            PrepareChartData();
        }
    }


    private void PrepareChartData()
    {
        var colors = ColorBuilder.CategoricalTwelveColors;

        var labels = new List<string>(); //dates

        var bevegeligData = new List<double>();
        var fastsittendeData = new List<double>();
        var gattData = new List<double>();
        var kjmhunnData = new List<double>();

        foreach (var farm in organizationData.farms.Values)
        {
            foreach ( var cage in farm.cages.Values)
            {
                foreach (var fishgroup in cage.fishGroups)
                {
                    foreach (var statistic in fishgroup.statistics)
                    {
                        if (!labels.Contains(statistic.date))
                        {
                            labels.Add(statistic.date);
                        }

                        var bevegeligLice = statistic.lices.FirstOrDefault(lice => lice.name == "Bevegelig")?.average ?? 0;
                        bevegeligData.Add(bevegeligLice);


                        var fastsittendeLice = statistic.lices.FirstOrDefault(lice => lice.name == "Fastsittende")?.average ?? 0;
                        fastsittendeData.Add(fastsittendeLice);

                        var gattLice = statistic.lices.FirstOrDefault(lice => lice.name == "Gatt")?.average ?? 0;
                        gattData.Add(gattLice);

                        var kjmhunnLice = statistic.lices.FirstOrDefault(lice => lice.name == "Kjmhunn")?.average ?? 0;
                        kjmhunnData.Add(kjmhunnLice);
                    }
                }
            }
        }


        var datasets = new List<IChartDataset>();

        datasets.Add(CreateLiceDataset("Bevegelig", bevegeligData, colors[0]));
        datasets.Add(CreateLiceDataset("Fastsittende", fastsittendeData, colors[1]));
        datasets.Add(CreateLiceDataset("Gatt", gattData, colors[2]));
        datasets.Add(CreateLiceDataset("Kjmhunn", kjmhunnData, colors[3]));

        chartData = new ChartData
            {
                Labels = labels.Distinct().OrderBy(label => label).ToList(),
                Datasets = datasets
            };


        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };

        lineChartOptions.Scales.X!.Title!.Text = "Date";
        lineChartOptions.Scales.X.Title.Display = true;

        lineChartOptions.Scales.Y!.Title!.Text = "Lice";
        lineChartOptions.Scales.Y.Title.Display = true;

        lineChartOptions.Plugins.Title!.Text = "Lice data";
        lineChartOptions.Plugins.Title.Display = true;

        lineChartOptions.Plugins.Datalabels.Color = "white";
    }

    private LineChartDataset CreateLiceDataset(string label, List<double> data, string color) => new LineChartDataset
    {
        Label = label,
        Data = data,
        BackgroundColor = new List<string> { color },
        BorderColor = new List<string> { color },
        BorderWidth = new List<double> { 2 },
        HoverBorderWidth = new List<double> { 4 },
        PointBackgroundColor = new List<string> { color },
        PointRadius = new List<int> { 3 },
        PointHoverRadius = new List<int> { 4 },

        Datalabels = new() { Align = "end", Anchor = "end" }
    };
}
